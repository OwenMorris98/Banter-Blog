@page "/Authors/Create"
@rendermode @(new InteractiveServerRenderMode(false))


<AuthorizeView Context="authContext">
    <Authorized>

@if (!success)
{

    <EditForm Model="@model" OnValidSubmit="OnValidSubmit" FormName="AuthorForm">
        <DataAnnotationsValidator />
        <MudCard>
            <MudCardContent>
                <MudTextField Label="First name" HelperText="Max. 8 characters"
                @bind-Value="model.First_Name" For="@(() => model.First_Name)" />
                <MudTextField Label="Last name" Class="mt-3"
                @bind-Value="model.Last_Name" For="@(() => model.Last_Name)" />
                <MudTextField Label="Nickname" HelperText="Choose a nickname" Class="mt-3"
                @bind-Value="model.NickName" For="@(() => model.NickName)" />

            </MudCardContent>
            <MudCardActions>
                <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary" Class="ml-auto">Register</MudButton>
            </MudCardActions>
        </MudCard>
    </EditForm>
}
else
{
    <p>You have now signed up to be an Author</p>
}
</Authorized>
<NotAuthorized>
    <p>Please sign in to view this page</p>
</NotAuthorized>

</AuthorizeView>


@inject ApplicationDbContext _context;
@inject AuthenticationStateProvider _authStateProvider;
@inject NavigationManager nav
@code {
    RegisterAuthorForm model = new RegisterAuthorForm();
    bool success;

    public ApplicationUser? User { get; set; } 

    public class RegisterAuthorForm
    {
        [Required] 
        public string First_Name { get; set; }

        [Required]     
        public string Last_Name { get; set; }

        [Required]
        [StringLength(15, ErrorMessage = "Nickname must be less than 15 characters")]
        public string NickName { get; set; }

    }

    private async Task OnValidSubmit(EditContext context)
    {
        User = await _context.Users.FindAsync(await getUserId());

        success = true;
        Author author = new Author(
            model.First_Name,
            model.Last_Name,
            model.NickName,
            User,
            null
        );

        _context.Add(author);
        await _context.SaveChangesAsync();
        StateHasChanged();
        
    }

    public async Task<string> getUserId()
    {
        var user = (await _authStateProvider.GetAuthenticationStateAsync()).User;
        var UserId = user.FindFirst(u => u.Type.Contains("nameidentifier"))?.Value;
        return UserId;
    }

}