@page "/"
@rendermode @(new InteractiveServerRenderMode(false))

<PageTitle>Home</PageTitle>



@foreach (var post in posts)
{
    <MudCard Elevation="2" Outlined="true" Style="margin:1rem;">
        <MudCardContent>
            <MudText>@post.Title</MudText>
            <MudText Typo="Typo.body2">@post.Body</MudText>
            <MudText Typo="Typo.caption">Written by: @post.Author.Nickname</MudText>
        </MudCardContent>
        <MudCardActions>
            @if (post.isLiked)
            {
                <MudIconButton Icon="@Icons.Material.Filled.ThumbUp" Color="Color.Primary" OnClick="() => likePost(post)" />
                <MudText>@post.Likes.ToString()</MudText>
            }
            else
            {
                <MudIconButton Icon="@Icons.Material.Outlined.ThumbUp" Color="Color.Default" OnClick="() => likePost(post)" />
                <MudText>@post.Likes.ToString()</MudText>
            }


            @*  <MudButton Variant="Variant.Text" Color="Color.Primary">Read More</MudButton> *@
        </MudCardActions>
        @if(UserId is not null)
        {
            <MudButton Variant="Variant.Text" OnClick="@(() => OpenDrawer(Anchor.End, post.Id))">Add Comment</MudButton>
        }
        
        @if (post.Comments.Any())
        {
            <MudStack Spacing="2" Class="align-start" AlignItems="AlignItems.Start">
                <MudButton Variant="Variant.Text" Color="Color.Primary" OnClick="OnExpandCollapseClick">@(_expanded ? "Hide" : "View Comments")</MudButton>
                
                <MudDivider />       
                <MudCollapse Expanded="_expanded">
                    @foreach(var commentItem in post.Comments)
                    {                       
                        <Comment blogComment="commentItem"></Comment>
                    }
                    
                </MudCollapse>
                
        </MudStack>
        }
        
     
    </MudCard>

    <MudDrawer @bind-Open="@open" Anchor="@anchor" Elevation="1" Variant="@DrawerVariant.Temporary" Width="50vh">
        <MudDrawerHeader>
            <MudText Typo="Typo.h6">Add Comment</MudText>
        </MudDrawerHeader>
        <AddComment PostId="@drawerPostId" UserId="@UserId"></AddComment>
    </MudDrawer>
 
}



@inject ApplicationDbContext _context;
@inject AuthenticationStateProvider _authStateProvider;
@inject NavigationManager nav;
@code {
    public string? UserId { get; set; }
    public ApplicationUser? User { get; set; }

    public bool isSignedIn { get; set; }

    public bool isLiked { get; set; }

    bool _expanded = false;

    bool open;
    Anchor anchor;
    int drawerPostId;

    public List<BlogPostsViewModel> posts = new List<BlogPostsViewModel>();


    protected async override Task OnInitializedAsync()
    {
        var blogposts = await _context.BlogPosts
        .Include(a => a.Author)
        .Include(r => r.Reactions)
        .Include(c => c.Comments)
            .ThenInclude(a => a.ApplicationUser)
        .OrderByDescending(b => b.CreatedDt)
        .ToListAsync();

        posts = mapBlogPostToVM(blogposts);

        var user = getUserId();

        if (user.Result is not null)
        {
            isSignedIn = true;
            User = await _context.Users.FindAsync(UserId);

            foreach (var post in posts)
            {
                foreach (var reactions in post.Reactions.ToList())
                {
                    if (reactions.User is not null && reactions.User.Id == User.Id)
                    {
                        post.isLiked = true;
                    }
                    // post.Likes++;
                }
            }
        }
    }


    private void OnExpandCollapseClick()
    {
        _expanded = !_expanded;
    }



    public async Task likePost(BlogPostsViewModel vm)
    {
        if (UserId != null)
        {
            var reaction = await _context.Reactions.Where(r => r.Post.Id == vm.Id && r.User.Id == UserId).FirstOrDefaultAsync();

            if (reaction != null)
            {
                _context.Reactions.Remove(reaction);
                vm.isLiked = false;
                vm.Likes--;
            }
            else
            {
                var post = await _context.BlogPosts.FindAsync(vm.Id);
                Reaction like = new Reaction()
                    {
                        Post = post,
                        User = User
                    };
                _context.Reactions.Add(like);
                vm.isLiked = true;
                vm.Likes++;
            }
            await _context.SaveChangesAsync();



        }

    }


    public async Task<string> getUserId()
    {
        var user = (await _authStateProvider.GetAuthenticationStateAsync()).User;
        var userId = user.FindFirst(u => u.Type.Contains("nameidentifier"))?.Value;
        if (userId != null)
            UserId = userId.ToString();

        return userId;
    }

    public List<BlogPostsViewModel> mapBlogPostToVM(List<BlogPost> posts)
    {
        var vmList = new List<BlogPostsViewModel>();
        foreach (var post in posts)
        {
            BlogPostsViewModel vm = new BlogPostsViewModel()
                {
                    Id = post.Id,
                    Title = post.Title,
                    Body = post.Body,
                    Author = post.Author,
                    CreatedDt = post.CreatedDt,
                    Reactions = post.Reactions,
                    Comments = post.Comments,
                    Likes = post.Reactions.Count()
                };
            vmList.Add(vm);


        }
        return vmList;
    }

    void OpenDrawer(Anchor anchor, int postId)
    {
        open = true;
        this.anchor = anchor;
        drawerPostId = postId;
       
    }

   
}